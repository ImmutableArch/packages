name: Build AUR packages and publish repo to GitHub Pages

on:
  push:
    paths:
      - 'aur-packages'
      - '**/PKGBUILD'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    # run inside an archlinux container so pacman/makepkg work
    container:
      image: archlinux:latest
    outputs:
      repo-path: ${{ steps.save.outputs.repo_dir }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pacman environment
        run: |
          pacman -Sy --noconfirm --needed archlinux-keyring
          pacman -Sy --noconfirm --needed base-devel git pacman-contrib sudo
          pacman-key --init
          pacman-key --populate archlinux

      - name: Create builder user
        run: |
          useradd -m builder
          echo "builder ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/builder
          mkdir -p /home/builder/src
          chown -R builder:builder /home/builder

      - name: Prepare output repo dir
        run: |
          mkdir -p /tmp/aur-repo
          chown -R builder:builder /tmp/aur-repo

      - name: Build packages listed in aur-packages
        shell: bash
        run: |
          set -euo pipefail
          SRC_DIR=$(pwd)
          while IFS= read -r line || [ -n "$line" ]; do
            pkg=$(echo "$line" | sed -e 's/#.*//' -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            [ -z "$pkg" ] && continue
            echo "Processing: $pkg"
            cd /home/builder/src
            # if it's a git URL
            if [[ "$pkg" =~ ^https?:// ]]; then
              git clone --depth 1 "$pkg" || (echo "clone failed, retrying shallow full clone" && git clone "$pkg")
              d=$(basename "$pkg" .git)
            elif [ -d "$SRC_DIR/$pkg" ]; then
              # local folder in repo
              cp -r "$SRC_DIR/$pkg" .
              d=$(basename "$pkg")
            else
              # assume AUR package name
              git clone "https://aur.archlinux.org/${pkg}.git" || { echo "Failed cloning AUR $pkg"; continue; }
              d="$pkg"
            fi
            cd "$d"
            # build as non-root user; skip PGP checks to avoid interactive key imports
            sudo -u builder bash -lc "cd /home/builder/src/${d} && makepkg --noconfirm --skippgpcheck --syncdeps"
            # copy built packages to repo dir
            shopt -s nullglob
            cp -v /home/builder/src/${d}/*.pkg.* /tmp/aur-repo/ || true
            cd /home/builder/src
          done < "$SRC_DIR/aur-packages"
          echo "Built packages stored in /tmp/aur-repo"

      - name: Create repo database with repo-add
        run: |
          cd /tmp/aur-repo
          # initialize empty db if not exist
          if [ ! -f immutablearch.db.tar.gz ]; then
            repo-add immutablearch.db.tar.gz
          fi
          # add all packages (repo-add will update db)
          repo-add immutablearch.db.tar.gz *.pkg.* || true
          ls -l

      - name: Save repo as artifact
        id: save
        uses: actions/upload-artifact@v4
        with:
          name: aur-repo
          path: /tmp/aur-repo

  publish:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download built repo
        uses: actions/download-artifact@v4
        with:
          name: aur-repo
          path: ./aur-repo

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0
          ref: gh-pages || master

      - name: Prepare gh-pages branch (create if missing)
        run: |
          set -e
          if ! git show-ref --verify --quiet refs/heads/gh-pages; then
            git checkout --orphan gh-pages
            git rm -rf .
            git commit --allow-empty -m "Initialize gh-pages"
            git push -u origin gh-pages
          fi
          git checkout gh-pages

      - name: Copy repo files into site folder
        run: |
          rm -rf ./packages || true
          mkdir -p ./packages
          cp -r ./aur-repo/* ./packages/
          # ensure index and packages present
          ls -la ./packages

      - name: Commit and push to gh-pages
        env:
          GIT_AUTHOR_NAME: "github-actions"
          GIT_AUTHOR_EMAIL: "actions@github.com"
        run: |
          git add --all
          git commit -m "Update AUR repo (packages) [skip ci]" || echo "No changes to commit"
          git push origin gh-pages

      - name: Optionally enable GitHub Pages (info)
        run: |
          echo "Your packages are now on the gh-pages branch. Configure GitHub Pages in repository settings to publish from branch 'gh-pages' (root) or use the repository settings UI."
